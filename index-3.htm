<!DOCTYPE html>
<html>
<head>
<title>Sentiments  Peckham </title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
<meta name="viewport" content="width = device-width, initial-scale = 1.0 ,  minimum-scale = 1.0,  maximum-scale=1.0"> 

<script type="text/javascript" src="//use.typekit.net/aen0ipw.js"></script>
<script type="text/javascript">try{Typekit.load();}catch(e){}</script>
<link href="css/base.css" type="text/css" rel="stylesheet"/>

<style type="text/css">
		body {
		width: 100%;
		height: 100%;
		overflow: hidden;
	}
	
	
	#message { 
		position: absolute;
		width: 100%;
		height: auto;
	}
	
	#location {
		font-family: "lust-display", serif;
		font-size: 22px;
		line-height: 22px;
		letter-spacing: 0px;
		color: #000;
		text-align: center;
		font-weight: 400;
		-webkit-font-smoothing: antialiased;
		
		width: 100%;
		height: auto;
		position: relative;
		
	}
	
	#time {
		font-family: "source-code-pro";
		font-size: 18px;
		line-height: 18px;
		
		color: #000;
		text-align: center;
		font-weight: 400;
		
		width: 100%;
		height: auto;
		position: relative;

	}
	
	canvas { 
		position: absolute;
	}
	
	@media (min-width: 600px) {
		
		#location {
			font-size: 32px;
			line-height: 32px;
		}
		
		#time {
			font-size: 20px;
			line-height: 20px;
		}
	}

	@media (min-width: 1024px) {
		
		#location {
			font-size: 55px;
			line-height: 55px;
		}
		
		#time {
			font-size: 27px;
			line-height: 27px;
		}
	}

}

	
</style>
</head>
<body>


<script type="text/javascript" src="helpers/utility.js"></script>
<script type="text/javascript" src="helpers/colour-stepper.js"></script>
<script type="text/javascript">

var request_animation_frame =  window.requestAnimationFrame || 
	window.mozRequestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    window.oRequestAnimationFram;
    
    
// create canvas
var canvas; 

// canvas context
var context;

// size of body
var body_size = {};

//Store our response
var cached_response;


// Colours set at the beginning
var colour_1;
var colour_2; 
var next_colour_1;
var next_colour_2;
// cycle of colours to iterate through
var colour_1_steps;
var colour_2_steps


// specific area data position
var area_position = 0;

// specific photo data position
var photo_position = 0;
var next_photo_position = 1;

// Useful elements
var location_element;

var time_element;


// start
document.addEventListener("DOMContentLoaded", function() {
    
    // set up the canvas
    canvas = document.createElement("canvas");
	document.body.appendChild(canvas);
	context = canvas.getContext('2d');
	
	
	location_element = utility.element('h1', { "id" : "location" });
	time_element = utility.element('h2', { "id" : "time" });
	
	document.body.appendChild(location_element);
	document.body.appendChild(time_element);


	sizing();
	window.addEventListener("resize", sizing);
	
 	//Start getting data
 	var today = new Date();
 	var year = today.getUTCFullYear();
 	var month = today.getUTCMonth()+1;
 	var day = today.getUTCDate();
 	var file_name = year+"-"+month+"-"+day;
	utility.ajax({
		url : "responses/"+file_name+".json",
		callback : function(data) {
		
			cached_response = data;
			
			set_colors();
   
			draw();
			
			set_date();
			
		}
	});
	 
});
 
function sizing() {
	body_size = document.body.getBoundingClientRect();
	canvas.width = body_size.width;
	canvas.height = body_size.height;	
	
	var text_width = body_size.width*0.6;
	if(text_width<320) { text_width = 320; }
	
 	var left_pos =(body_size.width - text_width)/2;
	location_element.style.width =  text_width+ "px"
	time_element.style.width = text_width + "px"
	
	location_element.style.left = left_pos+ "px"
	time_element.style.left = left_pos+ "px"
	location_element.style.top = (body_size.height-(location_element.getBoundingClientRect().height + time_element.getBoundingClientRect().height ))/2 + "px";
	
	time_element.style.top = (body_size.height-(location_element.getBoundingClientRect().height + time_element.getBoundingClientRect().height ))/2 + "px";

}


function set_colors() {
	
	colour_1 ='#'+ cached_response[area_position].data[photo_position].colours[0].hex;
	colour_2 = '#'+cached_response[area_position].data[photo_position].colours[1].hex
	 
	next_colour_1 = '#'+cached_response[area_position].data[next_photo_position].colours[0].hex;
	next_colour_2 = '#'+cached_response[area_position].data[next_photo_position].colours[1].hex;
	
	colour_1_steps =getTransitionSteps(colour_1, next_colour_1, steps);
	colour_2_steps= getTransitionSteps(colour_2,next_colour_2, steps);
		 
}

function set_date() {
	

 	var date = new Date(cached_response[area_position].data[photo_position].created*1000);
	
	var day = date.getDate();
	var month = (date.getMonth()+1);
	var year =  date.getFullYear();
	
	var hours = date.getHours();
	var minutes = date.getMinutes();
	
	if(day < 10) { day = '0'+day;}
	if(month < 10) { month = '0'+month;}
	if(hours < 10) { hours = '0'+hours;}
	if(minutes < 10) { minutes = '0'+minutes;}
	
	year = year.toString().substr(2,2);
	
	// will display time in 10:30:23 format
	var formatted_time = day+""+ month +""+ year + " "  +hours + minutes + 'H';
	
	location_element.innerHTML = cached_response[area_position].title
	time_element.innerHTML = formatted_time;
 	
 	
	sizing();	
 	
}

var step_counter = 0;
var steps =10;

function draw() {
	
	context.clearRect(0, 0, body_size.width, body_size.height);
	
	var size = body_size.width;
	 
	size = ((cached_response[area_position].data[next_photo_position].likes+1) /10) * size
   

	if(body_size.width > body_size.height) {
		size = body_size.height;
		size = ((cached_response[area_position].data[next_photo_position].likes+1) /10) * size
	}
	
	size = size/5.5	

	// go through colours
	colour_1=colour_1_steps[step_counter];
	colour_2=colour_2_steps[step_counter];
	
	step_counter++;
	
	// reset steps to 0
	if(step_counter>=steps) { 
	
		step_counter = 0;
		steps = 10+cached_response[area_position].data[next_photo_position].likes;
		
		// go to the next image in an area
		photo_position++;
		next_photo_position = photo_position+1;
		
		if(next_photo_position>=cached_response[area_position].data.length-1) {
			next_photo_position=photo_position-1;
		}
		
		// reset the photo position
		if(photo_position >=cached_response[area_position].data.length-1) {
		
			photo_position = 0;
			next_photo_position=1;
			area_position++;
			
			// reset the area position
			if(area_position>=cached_response.length-1) {
				
				area_position=0;
				photo_position=0;
				step_counter=0;
			}
		}
		
		set_colors();
		set_date();
	}
	
   var circle = create_gradient(body_size.width/2,body_size.height/2, size, colour_1,colour_2);
   circle.update();
   
   request_animation_frame(draw);
  
  
}

var create_gradient = function(x,y, radius, colour_1,colour_2) {
	
	var self = this; 
	
	this.x = x,
	this.y = y,
	this.radius = radius;
	this.update = function(){
		 
		// Create gradients
		var gradient = context.createLinearGradient(0,0, self.x + self.radius, 0);
		
		gradient.addColorStop(0, colour_1); 
		gradient.addColorStop(1, colour_2);
		
		context.beginPath();
		context.arc(self.x, self.y, self.radius, 0 , (Math.PI * 2));
		context.closePath();
		context.fillStyle = gradient;
		context.fill();
   
	}
	
	return this;
}
</script>

</body>
</html>